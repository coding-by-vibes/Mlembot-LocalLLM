{
    "components": {
        "schemas": {
            "BasicError": {
                "properties": {
                    "msg": {"type": "string"},
                    "type": {"type": "string"}
                },
                "required": ["msg", "type"],
                "type": "object"
            },
            "BasicResult": {
                "properties": {
                    "result": {"$ref": "#/components/schemas/BasicResultInner"}
                },
                "required": ["result"],
                "type": "object"
            },
            "BasicResultInner": {
                "properties": {
                    "result": {"type": "string"}
                },
                "required": ["result"],
                "type": "object"
            },
            "GenerationInput": {
                "properties": {
                    "max_context_length": {
                        "description": "Maximum number of tokens to send to the model.",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "max_length": {
                        "description": "Number of tokens to generate.",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "prompt": {
                        "description": "This is the submission.",
                        "type": "string"
                    },
                    "rep_pen": {
                        "description": "Base repetition penalty value.",
                        "minimum": 1,
                        "type": "number"
                    },
                    "rep_pen_range": {
                        "description": "Repetition penalty range.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "sampler_order": {
                        "description": "Sampler order to be used. If N is the length of this array, then N must be greater than or equal to 6 and the array must be a permutation of the first N non-negative integers.",
                        "items": {"type": "integer"},
                        "minItems": 6,
                        "type": "array"
                    },
                    "sampler_seed": {
                        "description": "RNG seed to use for sampling. If not specified, the global RNG will be used.",
                        "maximum": 999999,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "stop_sequence": {
                        "description": "An array of string sequences where the API will stop generating further tokens. The returned text WILL contain the stop sequence if trim_stop is false.",
                        "items": {"type": "string"},
                        "type": "array"
                    },
                    "temperature": {
                        "description": "Temperature value.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "tfs": {
                        "description": "Tail free sampling value.",
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                    },
                    "top_a": {
                        "description": "Top-a sampling value.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "top_k": {
                        "description": "Top-k sampling value.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "top_p": {
                        "description": "Top-p sampling value.",
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                    },
                    "min_p": {
                        "description": "Min-p sampling value.",
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                    },
                    "typical": {
                        "description": "Typical sampling value.",
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number"
                    },
                    "use_default_badwordsids": {
                        "default": false,
                        "description": "If true, prevents the EOS token from being generated (Ban EOS).",
                        "type": "boolean"
                    },
                    "dynatemp_range": {
                        "default": 0,
                        "description": "If not equal to 0, uses dynamic temperature. Dynamic temperature range will be between Temp+Range and Temp-Range. If equal to 0, uses static temperature.",
                        "minimum": -5,
                        "maximum": 5,
                        "type": "number"
                    },
                    "smoothing_factor": {
                        "default": 0,
                        "description": "Modifies temperature behavior. If greater than 0 uses smoothing factor.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "dynatemp_exponent": {
                        "default": 1,
                        "description": "Exponent used in dynatemp.",
                        "type": "number"
                    },
                    "mirostat": {
                        "description": "KoboldCpp ONLY. Sets the mirostat mode, 0=disabled, 1=mirostat_v1, 2=mirostat_v2",
                        "minimum": 0,
                        "maximum": 2,
                        "type": "number"
                    },
                    "mirostat_tau": {
                        "description": "KoboldCpp ONLY. Mirostat tau value.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "mirostat_eta": {
                        "description": "KoboldCpp ONLY. Mirostat eta value.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "genkey": {
                        "description": "KoboldCpp ONLY. A unique genkey set by the user. When checking a polled-streaming request, use this key to be able to fetch pending text even if multiuser is enabled.",
                        "type": "string"
                    },
                    "grammar": {
                        "description": "KoboldCpp ONLY. A string containing the GBNF grammar to use.",
                        "type": "string"
                    },
                    "grammar_retain_state": {
                        "default": false,
                        "description": "KoboldCpp ONLY. If true, retains the previous generation's grammar state, otherwise it is reset on new generation.",
                        "type": "boolean"
                    },
                    "memory": {
                        "description": "KoboldCpp ONLY. If set, forcefully appends this string to the beginning of any submitted prompt text. If resulting context exceeds the limit, forcefully overwrites text from the beginning of the main prompt until it can fit. Useful to guarantee full memory insertion even when you cannot determine exact token count.",
                        "type": "string"
                    },
                    "images": {
                        "description": "KoboldCpp ONLY. If set, takes an array of base64 encoded strings, each one representing an image to be processed.",
                        "type": "array",
                        "items": {"type": "string"}
                    },
                    "trim_stop": {
                        "default": true,
                        "description": "KoboldCpp ONLY. If true, also removes detected stop_sequences from the output and truncates all text after them. If false, output will also include stop sequence and potentially a few additional characters.",
                        "type": "boolean"
                    },
                    "render_special": {
                        "default": false,
                        "description": "KoboldCpp ONLY. If true, prints special tokens as text for GGUF models",
                        "type": "boolean"
                    },
                    "bypass_eos": {
                        "default": false,
                        "description": "KoboldCpp ONLY. If true, allows EOS token to be generated, but does not stop generation. Not recommended unless you know what you are doing.",
                        "type": "boolean"
                    },
                    "banned_tokens": {
                        "description": "An array of string sequences, each entry represents a word or phrase prevented from being generated, either modifying model vocab or by backtracking and regenerating when they appear.",
                        "items": {"type": "string"},
                        "type": "array"
                    },
                    "logit_bias": {
                        "default": {},
                        "description": "KoboldCpp ONLY. An dictionary of key-value pairs, which indicate the token IDs (int) and logit bias (float) to apply for that token. Up to 16 value can be provided.",
                        "type": "object",
                        "example": {
                            "2": -20,
                            "145": -1.4,
                            "3105": 3.2
                        }
                    },
                    "dry_multiplier": {
                        "description": "KoboldCpp ONLY. DRY multiplier value, 0 to disable.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "dry_base": {
                        "description": "KoboldCpp ONLY. DRY base value.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "dry_allowed_length": {
                        "description": "KoboldCpp ONLY. DRY allowed length value.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "dry_sequence_breakers": {
                        "description": "An array of string sequence breakers for DRY.",
                        "items": {"type": "string"},
                        "type": "array"
                    },
                    "xtc_threshold": {
                        "description": "KoboldCpp ONLY. XTC threshold.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "xtc_probability": {
                        "description": "KoboldCpp ONLY. XTC probability. Set to above 0 to enable XTC.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "logprobs": {
                        "default": false,
                        "description": "If true, return up to 5 top logprobs for generated tokens. Incurs performance overhead.",
                        "type": "boolean"
                    }
                },
                "required": ["prompt"],
                "type": "object"
            },
            "GenerationOutput": {
                "properties": {
                    "results": {
                        "description": "Array of generated outputs.",
                        "items": {"$ref": "#/components/schemas/GenerationResult"},
                        "type": "array"
                    }
                },
                "required": ["results"],
                "type": "object"
            },
            "GenerationResult": {
                "properties": {
                    "text": {
                        "description": "Generated output as plain text.",
                        "type": "string"
                    }
                },
                "required": ["text"],
                "type": "object"
            }
        }
    },
    "info": {
        "title": "KoboldCpp API",
        "description": "For swagger.json, click here.",
        "version": "2025.01.08"
    },
    "openapi": "3.0.3"
} 